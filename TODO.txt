- Think the licensing through

- OF writer  
    - nMoles 1; entry may be unnexessary nowadays
   
- correct_coeffs() function could be tidied up by using the existing nasa-functions.

- Tcommon not required to be within the fit as a data point --> would simplify the setup
    - You could avoid calling Tc_i in fitting functions. 
    - There should be no need to include Tcommon twice in the matrix equation as it is done at the moment

- consider creating TransportData, TransportFit etc data classes to structure the modules
    - enables you to avoid use of tuples as function arguments in utilities
    - Downside is that you would need to use lists for including these classes per specie 
        --> prevents use of many 2d compatible functions (not really required at the moment though)
    - example:
        from dataclasses import dataclass
        @dataclass
        class TransportFit:
            '''Class for keeping track of transport dit data for easier use in the following functions'''
            name: str
            As: float
            Ts: int = 0

- Throughout the code, efficiency could be enhanced by optimizing for loops to vectorized operations in numpy. However, for the time being
function access to Cantera transport properties is more of a bottle neck as well as the loading of the environment.






